name: SonarQube

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}   # ‚Üê bot√≥n ‚ÄúRun workflow‚Äù en Actions

jobs:
  analyze:
    runs-on: ubuntu-latest   # usa self-hosted si tu Sonar no es p√∫blico
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # üîé Verifica que el runner alcanza tu servidor y que el token sirve
      - name: Ping SonarQube API
        run: |
          set -e
          echo "Ping ${{ secrets.SONAR_HOST_URL }}/api/server/version"
          curl -sSf -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/server/version" \
            | tee /tmp/sonar_version.txt
          echo "SonarQube version: $(cat /tmp/sonar_version.txt)"

      # üß™ An√°lisis m√≠nimo (no requiere sonar-project.properties)
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=sistema-pagos-a00837146
            -Dsonar.projectName=sistema-pagos-a00837146
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/.git/** 
            -Dsonar.verbose=true

      # (Opcional) Falla el pipeline si el Quality Gate est√° en rojo
      # - name: Quality Gate
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
